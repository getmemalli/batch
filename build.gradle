buildscript {
	ext {
		springBootVersion = '2.1.1.RELEASE'
		gradleDockerVersion = '4.2.0'
	}
	repositories {
		maven {
			url "https://dl.bintray.com/palantir/releases/"
		}
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("com.bmuschko:gradle-docker-plugin:${gradleDockerVersion}")
	}
}
// Import task types
import com.bmuschko.gradle.docker.tasks.image.*

apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.bmuschko.docker-remote-api'


group = 'com.razorpay'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

ext {
	mysqlConnectorVersion = '8.0.12'
	jacksonVersion = '2.9.7'
	springMetricsVersion = '0.5.1.RELEASE'
	prometheusClientVersion = '0.5.0'
	slf4jVersion = '1.7.25'
	swaggerVersion = '2.9.2'
	postgreSQLVersion = '42.2.5'
	lombokVersion = '1.18.4'
}

bootJar {
    excludeDevtools = false
    baseName = 'batch-docker'
    version = '0.1.0'
}

repositories {
	mavenCentral()
	jcenter()
}

configurations {
	providedRuntime
	compile.exclude module: 'spring-boot-starter-logging'
}

dependencies {
	implementation('org.springframework.boot:spring-boot-starter-batch')
	implementation('org.springframework.boot:spring-boot-starter-data-jpa')
	implementation('org.springframework.boot:spring-boot-starter-jersey')
	implementation('org.springframework.boot:spring-boot-starter-log4j2')
	implementation('org.springframework.boot:spring-boot-starter-quartz')
	implementation('org.springframework.boot:spring-boot-starter-web')
	implementation("org.springframework.boot:spring-boot-devtools")

	implementation("com.fasterxml.jackson.core:jackson-core:$jacksonVersion")
	implementation("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
	implementation("com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion")
	implementation("com.fasterxml.jackson.datatype:jackson-datatype-joda:$jacksonVersion")

	implementation("org.springframework.metrics:spring-metrics:$springMetricsVersion")
	implementation("io.prometheus:simpleclient_common:$prometheusClientVersion")
	implementation('org.springframework.retry:spring-retry')
	runtimeOnly("org.postgresql:postgresql:$postgreSQLVersion")
	compileOnly("org.projectlombok:lombok:$lombokVersion")
	annotationProcessor("org.projectlombok:lombok:$lombokVersion")
	providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')
	testImplementation('org.springframework.boot:spring-boot-starter-test')
	testImplementation('org.springframework.batch:spring-batch-test')
	implementation("io.springfox:springfox-swagger-ui:$swaggerVersion")
	implementation("io.springfox:springfox-swagger2:$swaggerVersion")

}

task docker(type: DockerBuildImage) {
	dependsOn build
	inputDir = file('.')
	tags = ["$bootJar.baseName:$bootJar.version"]
}
